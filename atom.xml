<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Auki&#39;s blog</title>
  
  <subtitle>DONE IS BETTER THAN PERFECT.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaoyu69.github.io/"/>
  <updated>2021-05-16T07:17:46.771Z</updated>
  <id>http://zhaoyu69.github.io/</id>
  
  <author>
    <name>赵煜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双指缩放原理</title>
    <link href="http://zhaoyu69.github.io/2021/05/16/%E5%8F%8C%E6%8C%87%E7%BC%A9%E6%94%BE%E5%8E%9F%E7%90%86/"/>
    <id>http://zhaoyu69.github.io/2021/05/16/%E5%8F%8C%E6%8C%87%E7%BC%A9%E6%94%BE%E5%8E%9F%E7%90%86/</id>
    <published>2021-05-16T06:53:29.000Z</published>
    <updated>2021-05-16T07:17:46.771Z</updated>
    
    <content type="html"><![CDATA[<p>双指缩放的本质是什么？以触摸的两点的连线的中心点为变换中心点，做缩放变换。<br>常见的解法可以采用变换矩阵，既用变换矩阵(transform matrix)点乘(x, y, 1)T，得到新坐标(x’, y’)。</p><p><img src="https://i.loli.net/2021/05/16/zQsUfLhnwBxruEC.png" alt="1.png"></p><p>变换矩阵即上图中蓝色的部分。<br>本问题中的transform matrix即下面三个矩阵按顺序点乘：</p><ol><li>坐标系变换矩阵（位移向量：旧原点向新原点）</li><li>缩放矩阵</li><li>还原坐标系变化（位移向量：新原点向旧原点）</li></ol><p>这里我们用到了两种矩阵：</p><ul><li>第1、第3步用到了translate matrix<br><img src="https://i.loli.net/2021/05/16/gvwuohy7EL9SIUA.png" alt="2.png"></li><li>第2步用到了scaling matrix<br><img src="https://i.loli.net/2021/05/16/VoqtiWGOj7LEkv1.png" alt="3.png"><br>假设触摸的两点的连线的中心点M的坐标为(Xc, Yc)，放大倍率为k，则变换矩阵为：<br><img src="https://i.loli.net/2021/05/16/fOBDVpYT4u9sCgq.png" alt="4.png"><br>以此算得新(x’, y’)：<br><img src="https://i.loli.net/2021/05/16/C42bxlJuzQO1IRH.png" alt="5.png"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;双指缩放的本质是什么？以触摸的两点的连线的中心点为变换中心点，做缩放变换。&lt;br&gt;常见的解法可以采用变换矩阵，既用变换矩阵(transform matrix)点乘(x, y, 1)T，得到新坐标(x’, y’)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.lol
      
    
    </summary>
    
    
      <category term="Math" scheme="http://zhaoyu69.github.io/categories/Math/"/>
    
    
      <category term="principle" scheme="http://zhaoyu69.github.io/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>Vue移动端项目搭建</title>
    <link href="http://zhaoyu69.github.io/2020/08/15/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://zhaoyu69.github.io/2020/08/15/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2020-08-15T05:19:41.000Z</published>
    <updated>2021-05-12T14:19:05.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ol><li>UI框架：Vue，Vant</li><li>脚手架：Vue CLI</li><li>状态管理：Vuex</li><li>路由管理：Vue Router</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li><p>全局安装vue-cli</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure></li><li><p>运行项目</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hello-world</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure></li><li><p>按需引入vant</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vant</span><br><span class="line">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure></li><li><p>在 babel.config.js 中添加：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins: [ [&apos;import&apos;, &#123; libraryName: &apos;vant&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;, &apos;vant&apos;] ]</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>Rem适配</p><p> Vant 中的样式默认使用px作为单位，如果需要使用rem单位，推荐使用以下两个工具：</p><ol><li><p>postcss-pxtorem 是一款 postcss 插件，用于将单位转化为 rem</p></li><li><p>lib-flexible 用于设置 rem 基准值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-pxtorem</span><br><span class="line">yarn add amfe-flexible</span><br></pre></td></tr></table></figure><p>在项目根目录下新建 vue.config.js 文件并写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const autoprefixer = require(&apos;autoprefixer&apos;);</span><br><span class="line">const pxtorem = require(&apos;postcss-pxtorem&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          autoprefixer(),</span><br><span class="line">          pxtorem(&#123;</span><br><span class="line">            rootValue: 37.5,</span><br><span class="line">            propList: [&apos;*&apos;]</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在根目录下的 main.js 中引入 amfe-flexible</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;amfe-flexible&apos;;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>引入vuex状态管理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure><p> 由此，我们开始创建状态管理的目录结构及文件内容：</p><p> index.js 是 store 的入口文件，对所有的子模块进行统一管理，modules 中存放子模块的状态</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">| - src</span><br><span class="line">| - - store</span><br><span class="line">| - - - modules</span><br><span class="line">| - - - - example.js</span><br><span class="line">| - - - index.js</span><br><span class="line"></span><br><span class="line">// index.js :</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">import example from &quot;./modules/example&quot;;</span><br><span class="line">Vue.use(Vuex); // 注入</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    example,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">example.js :</span><br><span class="line">const state = &#123;</span><br><span class="line">// 状态</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const getters = &#123;</span><br><span class="line">// 获取状态</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const actions = &#123;</span><br><span class="line">// 包含异步操作</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">// 不包含异步操作</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  namespaced: true, // 拥有自己的命名空间</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>记得在 main.js 中引入并注入vue<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import store from &apos;./store&apos;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure></code></pre><ol start="8"><li><p>引入Vue Router路由管理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn addvue-router</span><br></pre></td></tr></table></figure><p> 目录结构如下：</p><p> index.js 是 router 的入口文件，对所有的子路由进行统一管理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">| - src</span><br><span class="line">| - - router</span><br><span class="line">| - - - example.js</span><br><span class="line">| - - - index.js</span><br><span class="line"></span><br><span class="line">// index.js :</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import VueRouter from &apos;vue-router&apos;</span><br><span class="line">import Index from &apos;../views/Index.vue&apos;</span><br><span class="line">import Example from &apos;../views/Example.vue&apos;</span><br><span class="line">import example from &apos;./example&apos;;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    name: &apos;Index&apos;,</span><br><span class="line">    component: Index,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/example&apos;,</span><br><span class="line">    name: &apos;example&apos;,</span><br><span class="line">    component: Example,</span><br><span class="line">    children: example</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p> 记得在 main.js 中引入并注入vue router</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import router from &apos;./router&apos;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>根目录下新建 .env.test, .env.uat, .env.prod</p><p>写入不同的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = &apos;production&apos;</span><br><span class="line">VUE_APP_TAG = &apos;prod&apos;</span><br><span class="line">VUE_APP_BASEPATH = &apos;app&apos;</span><br><span class="line">VUE_APP_APIPATH = &apos;leave&apos;</span><br></pre></td></tr></table></figure><p>自建的变量必须加上VUE_APP的前缀 不然不生效</p><p>编辑 package.json scripts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;serve-test&quot;: &quot;vue-cli-service serve --mode test&quot;,</span><br><span class="line">&quot;serve-uat&quot;: &quot;vue-cli-service serve --mode uat&quot;,</span><br><span class="line">&quot;serve-prod&quot;: &quot;vue-cli-service serve --mode prod&quot;,</span><br><span class="line">&quot;build-test&quot;: &quot;vue-cli-service build --mode test&quot;,</span><br><span class="line">&quot;build-uat&quot;: &quot;vue-cli-service build --mode uat&quot;,</span><br><span class="line">&quot;build-prod&quot;: &quot;vue-cli-service build --mode prod&quot;,</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>滚动后跳转新页面，滚动条未到顶部 | 前进后退需要保留滚动条位置的：<a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html</a></p></li><li><p>新的弹出页未禁用body的滚动：<a href="https://github.com/willmcpo/body-scroll-lock" target="_blank" rel="noopener">https://github.com/willmcpo/body-scroll-lock</a></p></li><li><p>vant只监听移动端touch事件，需要适配PC端mouse事件的：<a href="https://github.com/youzan/vant/tree/dev/packages/vant-touch-emulator" target="_blank" rel="noopener">https://github.com/youzan/vant/tree/dev/packages/vant-touch-emulator</a></p></li><li><p>.vue中想要修改vant默认样式的：</p><ol><li><p>如果使用less，添加/deep/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">    /deep/ .van-search &#123;background: #efeff4;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果不使用less，添加&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    &gt;&gt;&gt; .van-search &#123;background: #efeff4;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;技术选型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;UI框架：Vue，Vant&lt;/li&gt;
&lt;li&gt;脚手架：Vue CLI&lt;/li&gt;
&lt;li&gt;状态管理：Vuex&lt;/l
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://zhaoyu69.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://zhaoyu69.github.io/tags/Vue/"/>
    
      <category term="Vant" scheme="http://zhaoyu69.github.io/tags/Vant/"/>
    
      <category term="Vuex" scheme="http://zhaoyu69.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Centos7项目环境安装及部署</title>
    <link href="http://zhaoyu69.github.io/2020/01/14/Centos7%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2/"/>
    <id>http://zhaoyu69.github.io/2020/01/14/Centos7%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2/</id>
    <published>2020-01-14T06:46:02.000Z</published>
    <updated>2021-05-12T14:19:05.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos7-项目环境安装及部署"><a href="#Centos7-项目环境安装及部署" class="headerlink" title="Centos7 项目环境安装及部署"></a>Centos7 项目环境安装及部署</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ul><li><p><strong>node</strong>：后端环境</p><blockquote><p>curl –silent –location <a href="https://rpm.nodesource.com/setup_8.x" target="_blank" rel="noopener">https://rpm.nodesource.com/setup_8.x</a> | sudo bash -</p></blockquote><blockquote><p>sudo yum -y install nodejs</p></blockquote></li><li><p><strong>git</strong>：版本控制工具</p><blockquote><p>sudo yum -y install git</p></blockquote></li></ul><a id="more"></a><ul><li><p><strong>mongodb</strong>：数据库</p><blockquote><p>cd /etc/yum.repos.d/</p></blockquote><blockquote><p>sudo vi mongodb-org-3.6.repo</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>sudo yum install -y mongodb-org</p></blockquote><blockquote><p>sudo service mongod start</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data:/var/lib/mongo </span><br><span class="line">log:/var/log/mongodb</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><ul><li><p><strong>nrm</strong> : npm 镜像管理工具</p><blockquote><p>npm i -g nrm</p></blockquote><blockquote><p>nrm use taobao</p></blockquote></li><li><p><strong>pm2</strong> : node 进程管理工具</p><blockquote><p>npm i -g pm2</p></blockquote><ol><li><p>centos 自启动</p><blockquote><p>pm2 startup centos</p></blockquote><blockquote><p>pm2 save</p></blockquote></li><li><p>windows 自启动</p><blockquote><p>npm install pm2-windows-startup -g</p></blockquote><blockquote><p>pm2-startup install</p></blockquote><blockquote><p>pm2 save</p></blockquote></li></ol></li><li><p><strong>parse</strong> ：mongodb 数据库管理工具</p><blockquote><p>npm i -g parse-server parse-dashboard </p></blockquote><blockquote><p>cd /usr/bin</p></blockquote><blockquote><p>vi parse-dashboard-config.json</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;apps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;serverURL&quot;: &quot;http://localhost:1337/parse&quot;,</span><br><span class="line">      &quot;appId&quot;: &quot;APPLICATION_ID&quot;,</span><br><span class="line">      &quot;masterKey&quot;: &quot;MASTER_KEY&quot;,</span><br><span class="line">      &quot;appName&quot;: &quot;app&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;users&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;user&quot;:&quot;admin&quot;,</span><br><span class="line">      &quot;pass&quot;:&quot;2218&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>centos 启动</p><blockquote><p>pm2 start parse-server  -x –  –appId APPLICATION_ID –masterKey MASTER_KEY –databaseURI mongodb://localhost/test</p></blockquote><blockquote><p>pm2 start parse-dashboard -x – –config parse-dashboard-config.json –allowInsecureHTTP</p></blockquote></li><li><p>windows 启动</p><blockquote><p>pm2 start %appdata%\npm\node_modules\parse-server\bin\parse-server –name parse-server  -x –  –appId APPLICATION_ID –masterKey MASTER_KEY –databaseURI mongodb://localhost/test</p></blockquote><blockquote><p>pm2 start %appdata%\npm\node_modules\parse-dashboard\bin\parse-dashboard –name parse-dashboard -x – –config parse-dashboard-config.json –allowInsecureHTTP</p></blockquote></li></ol></li><li><p>项目 app</p><blockquote><p>git clone …</p></blockquote><blockquote><p>npm i</p></blockquote><blockquote><p>pm2 start app.js</p></blockquote></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><a href="https://www.cnblogs.com/xixihuang/p/5404517.html" target="_blank" rel="noopener">配置本机的网络连接</a></p></li><li><p>ifconfig命令找不到</p><blockquote><p>yum install net-tools</p></blockquote></li><li><p><a href="https://www.cnblogs.com/lxg0/p/6413965.html" target="_blank" rel="noopener">ssh连接Virtualbox虚拟机</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centos7-项目环境安装及部署&quot;&gt;&lt;a href=&quot;#Centos7-项目环境安装及部署&quot; class=&quot;headerlink&quot; title=&quot;Centos7 项目环境安装及部署&quot;&gt;&lt;/a&gt;Centos7 项目环境安装及部署&lt;/h1&gt;&lt;h2 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; class=&quot;headerlink&quot; title=&quot;环境安装&quot;&gt;&lt;/a&gt;环境安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;node&lt;/strong&gt;：后端环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl –silent –location &lt;a href=&quot;https://rpm.nodesource.com/setup_8.x&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rpm.nodesource.com/setup_8.x&lt;/a&gt; | sudo bash -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo yum -y install nodejs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;git&lt;/strong&gt;：版本控制工具&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo yum -y install git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://zhaoyu69.github.io/categories/Tools/"/>
    
    
      <category term="Linux" scheme="http://zhaoyu69.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承</title>
    <link href="http://zhaoyu69.github.io/2020/01/13/JavaScript%E7%BB%A7%E6%89%BF/"/>
    <id>http://zhaoyu69.github.io/2020/01/13/JavaScript%E7%BB%A7%E6%89%BF/</id>
    <published>2020-01-13T02:28:52.000Z</published>
    <updated>2021-05-12T14:19:05.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>子类继承父类，可以使用父类的属性和方法。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>先定义一个父类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">    this.name = name || &apos;Animal&apos;;</span><br><span class="line">    this.sleep = function() &#123;</span><br><span class="line">        console.log(&apos;sleep now !&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.eat = function(food) &#123;</span><br><span class="line">    console.log(&apos;eat &apos; + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li><p>原型链继承</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 1 原型链继承</span><br><span class="line">function Cat1() &#123;</span><br><span class="line">   // 可增加专属于 Cat 的实例属性和方法</span><br><span class="line">&#125;</span><br><span class="line">Cat1.prototype = new Animal(&apos;cat1&apos;);</span><br><span class="line">// 原型的属性和方法只能在new Animal之后</span><br><span class="line">// 原型指向单个父类，无法实现多继承</span><br><span class="line">// 父类的原型和方法子类都能访问到</span><br><span class="line">// 来自原型对象的所有属性被所有实例共享</span><br><span class="line"></span><br><span class="line">const cat1 = new Cat1();</span><br><span class="line">console.log(cat1.name);</span><br><span class="line">cat1.eat(&apos;fish&apos;);</span><br><span class="line">cat1.sleep();</span><br><span class="line">console.log(cat1 instanceof Animal); //true</span><br><span class="line">console.log(cat1 instanceof Cat1); //true</span><br><span class="line">// 实例既是子类的实例也是父类的实例</span><br></pre></td></tr></table></figure></li><li><p>构造继承</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 2 构造继承</span><br><span class="line">function Cat2(name)&#123;</span><br><span class="line">    Animal.call(this);</span><br><span class="line">    // 可以实现多继承，call多个父类</span><br><span class="line">    this.name = name || &apos;cat2&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// 没用到原型：只能继承父类的实例属性和方法，不能继承原型的属性和方法。解决了&quot;来自原型对象的所有属性被所有实例共享&quot;问题。</span><br><span class="line"></span><br><span class="line">const cat2 = new Cat2();</span><br><span class="line">console.log(cat2.name);</span><br><span class="line">cat2.sleep();</span><br><span class="line">console.log(cat2 instanceof Animal); //false</span><br><span class="line">console.log(cat2 instanceof Cat1); //true</span><br><span class="line">// 实例并不是父类的实例，只是子类的实例</span><br></pre></td></tr></table></figure></li><li><p>实例继承</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 3 实例继承</span><br><span class="line">function Cat3(name)&#123;</span><br><span class="line">    const instance = new Animal();</span><br><span class="line">    // 不支持多继承</span><br><span class="line">    instance.name = name || &apos;Tom&apos;;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cat3 = new Cat3();</span><br><span class="line">// === (const cat3 = Cat3())</span><br><span class="line">console.log(cat3.name);</span><br><span class="line">cat3.sleep();</span><br><span class="line">console.log(cat3 instanceof Animal); // true</span><br><span class="line">console.log(cat3 instanceof Cat3); // false</span><br><span class="line">// 实例是父类的实例，不是子类的实例</span><br></pre></td></tr></table></figure></li><li><p>拷贝继承</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 4 拷贝继承</span><br><span class="line">function Cat4(name)&#123;</span><br><span class="line">    const animal = new Animal();</span><br><span class="line">    for(let p in animal)&#123;</span><br><span class="line">        Cat4.prototype[p] = animal[p];</span><br><span class="line">    &#125;</span><br><span class="line">    // 拷贝多个父类实现多继承，但效率低性能差，无法获取不可枚举属性（不能被for…in访问到）</span><br><span class="line">    Cat4.prototype.name = name || &apos;cat4&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cat4 = new Cat4();</span><br><span class="line">console.log(cat4.name);</span><br><span class="line">cat4.sleep();</span><br><span class="line">console.log(cat4 instanceof Animal); // false</span><br><span class="line">console.log(cat4 instanceof Cat4); // true</span><br></pre></td></tr></table></figure></li><li><p>组合继承</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 5 组合继承</span><br><span class="line">function Cat5(name)&#123;</span><br><span class="line">    Animal.call(this);</span><br><span class="line">    this.name = name || &apos;cat5&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat5.prototype = new Animal();</span><br><span class="line">Cat5.prototype.constructor = Cat5;</span><br><span class="line">// 较2：可以继承原型的属性和方法</span><br><span class="line"></span><br><span class="line">const cat5 = new Cat5();</span><br><span class="line">cat5.name;</span><br><span class="line">cat5.sleep();</span><br><span class="line">console.log(cat5 instanceof Animal); // true</span><br><span class="line">console.log(cat5 instanceof Cat5); // true</span><br><span class="line">// 既是子类的实例，也是父类的实例</span><br></pre></td></tr></table></figure></li><li><p>寄生组合继承</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 6 寄生组合继承</span><br><span class="line">function Cat6(name)&#123;</span><br><span class="line">    Animal.call(this);</span><br><span class="line">    this.name = name || &apos;Tom&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(function()&#123;</span><br><span class="line">    // 创建一个没有实例方法的类</span><br><span class="line">    var Super = function()&#123;&#125;;</span><br><span class="line">    Super.prototype = Animal.prototype;</span><br><span class="line">    // 将实例作为子类的原型</span><br><span class="line">    Cat6.prototype = new Super();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Cat6.prototype.constructor = Cat6;</span><br><span class="line"></span><br><span class="line">const cat6 = new Cat6();</span><br><span class="line">cat6.name;</span><br><span class="line">cat6.sleep();</span><br><span class="line">console.log(cat6 instanceof Animal); // true</span><br><span class="line">console.log(cat6 instanceof Cat6); //true</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;子类继承父类，可以使用父类的属性和方法。&lt;/p&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerlink&quot; title=&quot;实现方式&quot;&gt;&lt;/a&gt;实现方式&lt;/h2&gt;&lt;p&gt;先定义一个父类：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Animal(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name || &amp;apos;Animal&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.sleep = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;sleep now !&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Animal.prototype.eat = function(food) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;eat &amp;apos; + food);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoyu69.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://zhaoyu69.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型与原型链</title>
    <link href="http://zhaoyu69.github.io/2020/01/09/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://zhaoyu69.github.io/2020/01/09/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-01-09T08:59:16.000Z</published>
    <updated>2021-05-12T14:19:05.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123; </span><br><span class="line">&#125;;</span><br><span class="line">const person = new Person();</span><br><span class="line">person.name = &apos;zy&apos;;</span><br><span class="line">console.log(person.name); // zy</span><br></pre></td></tr></table></figure><p><code>Person</code> 是构造函数，<code>person</code> 是实例化对象。</p><a id="more"></a><h2 id="prototype、proto、constructor"><a href="#prototype、proto、constructor" class="headerlink" title="prototype、proto、constructor"></a>prototype、<strong>proto</strong>、constructor</h2><p><strong>原型：每个js对象都以一个原型对象为模板创建，并且会继承其属性。</strong><br><code>person</code> 的原型是 <code>Person.prototype</code>，<code>prototype</code> 是函数才有的属性，<br>每个js对象都有一个 <code>__proto__</code> 属性，该属性指向该对象的原型，<br>所以，<code>person.__proto__  === Person.prototype</code>，<br>同理，<code>Person.__proto__ === Function.prototype</code>。</p><p>那么我们再看看下面这几个是为什么？<br><code>Function.__proto__ === Function.prototype</code><br><code>Object.__proto__ === Function.prototype</code><br><code>Math.__proto__ === Object.prototype</code></p><p>看看下面这张图，是否有种恍然大明白的感觉。<br><img src="https://i.loli.net/2020/01/09/QUMfxF47emt8kyc.png" alt="prototype-1.png"></p><p>那么原型如何指向构造函数？也就是说 <code>Person.prototype</code> 和 <code>Person</code> 怎么联系起来？<br><code>constructor</code> 就是干这个事的，<code>Person.prototype.constructor === Person</code>。</p><p>他们的关系如下图所示：<br><img src="https://i.loli.net/2020/01/09/jrF3i9Uk5fWlVwo.png" alt="prototype-2.png"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>当读取实例的属性时，如果找不到，就会沿着原型链一直往上找。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">&#125;</span><br><span class="line">Object.prototype.name = &apos;obj&apos;;</span><br><span class="line">Person.prototype.name = &apos;person&apos;;</span><br><span class="line">var person = new Person();</span><br><span class="line">person.name = &apos;zy&apos;;</span><br><span class="line">console.log(person.name) // zy</span><br><span class="line"></span><br><span class="line">delete person.name;</span><br><span class="line">console.log(person.name) // person</span><br><span class="line"></span><br><span class="line">delete Person.prototype.name;</span><br><span class="line">console.log(person.name) // obj</span><br><span class="line"></span><br><span class="line">delete Object.prototype.name;</span><br><span class="line">console.log(person.name) // undefined</span><br></pre></td></tr></table></figure><p>如上面例子所展示的一样，如果没有 <code>person.name</code>，因为<code>person.__proto__ === Person.prototype</code>，所以会找到 <code>Person.prototype.name</code>。如果还没有，我们<strong>继续往上找找看</strong>，因为 <code>Person.prototype.__proto__ === Object.prototype</code>，所以会找到<code>Object.prototype.name</code>，如果还没有，因为<code>Object.prototype.__proto__ === null</code>，这意味着我们<strong>找到头了</strong>，实在是没了最后就会显示一个 <code>undefined</code>。</p><p>那么到底什么是原型链？答案就是上面这个找的过程连接起来的线。（下图蓝色线）<br><img src="https://i.loli.net/2020/01/09/dt94KFuNU1wZzTg.png" alt="prototype-3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;构造函数创建对象&quot;&gt;&lt;a href=&quot;#构造函数创建对象&quot; class=&quot;headerlink&quot; title=&quot;构造函数创建对象&quot;&gt;&lt;/a&gt;构造函数创建对象&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.name = &amp;apos;zy&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(person.name); // zy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;Person&lt;/code&gt; 是构造函数，&lt;code&gt;person&lt;/code&gt; 是实例化对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoyu69.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://zhaoyu69.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>this、apply、call、bind</title>
    <link href="http://zhaoyu69.github.io/2020/01/07/this-apply-call-bind/"/>
    <id>http://zhaoyu69.github.io/2020/01/07/this-apply-call-bind/</id>
    <published>2020-01-07T05:23:43.000Z</published>
    <updated>2021-05-12T14:19:05.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><p><strong>this 永远指向最后调用它的那个对象：我们看最后调用函数的 test() 前面是什么，如果没有调用对象那么就是全局对象 window，相当于window.test()。</strong></p><a id="more"></a><ol><li><p>纯粹的函数调用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">function test() &#123;</span><br><span class="line">   console.log(this.x);</span><br><span class="line">&#125;</span><br><span class="line">test();  // 1</span><br></pre></td></tr></table></figure><p> <strong>test() 前没有调用对象，所以 this 指向全局对象 window</strong></p></li><li><p>作为对象方法的调用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">  console.log(this.x);</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj.x = 1;</span><br><span class="line">obj.m = test;</span><br><span class="line">obj.m(); // 1</span><br></pre></td></tr></table></figure><p> <strong>m() 前面的调用对象是 obj，所以 this指向对象 obj</strong></p></li><li><p>作为构造函数的调用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x = 2;</span><br><span class="line">function test() &#123;</span><br><span class="line">  this.x = 1;</span><br><span class="line">&#125;</span><br><span class="line">var obj = new test();</span><br><span class="line">obj.x // 1</span><br><span class="line">x // 2</span><br></pre></td></tr></table></figure><p> <strong>构造函数中的 this 指向通过 new 实例化创建的 obj 对象，而非全局对象</strong></p></li></ol><h2 id="如何改变-this-的指向"><a href="#如何改变-this-的指向" class="headerlink" title="如何改变 this 的指向"></a>如何改变 this 的指向</h2><p>我们先看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var x = 2; </span><br><span class="line">var obj = &#123; </span><br><span class="line">    x: 1,</span><br><span class="line">    test1: function() &#123;</span><br><span class="line">        console.log(this.x);</span><br><span class="line">    &#125;,</span><br><span class="line">    test2: function() &#123;</span><br><span class="line">        setTimeout( function () &#123; </span><br><span class="line">            console.log(this.x);</span><br><span class="line">        &#125;,100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj.test1() // 1</span><br><span class="line">obj.test2() // 2</span><br></pre></td></tr></table></figure><p>obj.test1 方法的调用对象为 obj，所以 this 指向 obj，结果为 obj.x = 1;<br>obj.test2 方法的调用对象虽然也是 obj，但是 this 出现在 setTimeout 中，setTimeout 是匿名函数，<strong>在大多数情况下，匿名函数的 this 指向全局对象window</strong>，结果为 window.x = 2</p><p>那么我们将用以下方法对该例子进行改造，改变 this 的指向。</p><ol><li>箭头函数（es6）</li></ol><p><strong>箭头函数的 this 始终指向函数定义时的 this，而非执行时。</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var x = 2; </span><br><span class="line">var obj = &#123; </span><br><span class="line">    x: 1,</span><br><span class="line">    test1: function() &#123;</span><br><span class="line">        console.log(this.x);</span><br><span class="line">    &#125;,</span><br><span class="line">    test2: function() &#123;</span><br><span class="line">        setTimeout( ()=&gt; &#123; </span><br><span class="line">            console.log(this.x);</span><br><span class="line">        &#125;,100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj.test1() // 1</span><br><span class="line">obj.test2() // 1</span><br></pre></td></tr></table></figure></p><ol start="2"><li>__this = this</li></ol><p><strong>在函数的开头声明一个变量 __this，保存最原始的 this 指向，后面继续使用 __this，指向就不会再改变了</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var x = 2; </span><br><span class="line">var obj = &#123; </span><br><span class="line">    x: 1,</span><br><span class="line">    test1: function() &#123;</span><br><span class="line">        console.log(this.x);</span><br><span class="line">    &#125;,</span><br><span class="line">    test2: function() &#123;</span><br><span class="line">        var __this = this;</span><br><span class="line">        setTimeout( function () &#123; </span><br><span class="line">            console.log(__this.x);</span><br><span class="line">        &#125;,100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj.test1() // 1</span><br><span class="line">obj.test2() // 1</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>apply、call、bind</p><p> 首先我们来看一下 apply、call、bind 的语法</p><blockquote><p>func.apply(thisArg, [argsArray])<br>func.call(thisArg, arg1, arg2, …)<br>func.bind(thisArg[, arg1[, arg2[, …]]])</p></blockquote><p> 其中第一个参数 thisArg 是指定的 this 值，后面的参数为函数 func 的初始参数。<br> call() 方法的作用和 apply() 方法类似，区别就是 call() 方法接受的是参数列表，而 apply() 方法接受的是一个参数数组，他们的返回值均为使用调用者提供的 this 值和参数调用该函数的返回值，而 bind() 的返回值并不是函数的调用结果，而是返回一个原函数的拷贝，并拥有指定的 this 值和初始参数，再调用需要加()，具体的使用方法如下：</p><p> <strong>apply</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var x = 2; </span><br><span class="line">var obj = &#123; </span><br><span class="line">    x: 1,</span><br><span class="line">    test1: function() &#123;</span><br><span class="line">        console.log(this.x);</span><br><span class="line">    &#125;,</span><br><span class="line">    test2: function() &#123;</span><br><span class="line">        setTimeout( function () &#123; </span><br><span class="line">            console.log(this.x);</span><br><span class="line">        &#125;.apply(obj),100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj.test1() // 1</span><br><span class="line">obj.test2() // 1</span><br></pre></td></tr></table></figure><p> <strong>call</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var x = 2; </span><br><span class="line">var obj = &#123; </span><br><span class="line">    x: 1,</span><br><span class="line">    test1: function() &#123;</span><br><span class="line">        console.log(this.x);</span><br><span class="line">    &#125;,</span><br><span class="line">    test2: function() &#123;</span><br><span class="line">        setTimeout( function () &#123; </span><br><span class="line">            console.log(this.x);</span><br><span class="line">        &#125;.call(obj),100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj.test1() // 1</span><br><span class="line">obj.test2() // 1</span><br></pre></td></tr></table></figure><p> <strong>bind</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var x = 2; </span><br><span class="line">var obj = &#123; </span><br><span class="line">    x: 1,</span><br><span class="line">    test1: function() &#123;</span><br><span class="line">        console.log(this.x);</span><br><span class="line">    &#125;,</span><br><span class="line">    test2: function() &#123;</span><br><span class="line">        setTimeout( function () &#123; </span><br><span class="line">            console.log(this.x);</span><br><span class="line">        &#125;.bind(obj)(),100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj.test1() // 1</span><br><span class="line">obj.test2() // 1</span><br></pre></td></tr></table></figure><p> <strong>由此可见，apply 和 call 在不加参数时用法完全一样，bind 因为返回的是一个函数所以还需要加上 () 调用</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;this-的指向&quot;&gt;&lt;a href=&quot;#this-的指向&quot; class=&quot;headerlink&quot; title=&quot;this 的指向&quot;&gt;&lt;/a&gt;this 的指向&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;this 永远指向最后调用它的那个对象：我们看最后调用函数的 test() 前面是什么，如果没有调用对象那么就是全局对象 window，相当于window.test()。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoyu69.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://zhaoyu69.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions + Hexo</title>
    <link href="http://zhaoyu69.github.io/2019/12/27/github-actions/"/>
    <id>http://zhaoyu69.github.io/2019/12/27/github-actions/</id>
    <published>2019-12-27T02:17:15.000Z</published>
    <updated>2021-05-12T14:19:05.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p>With GitHub Actions you can automate your workflow from idea to production.<br><img src="https://i.loli.net/2019/12/27/1nV5RxZrSGqHsbm.png" alt="Workflows.png"></p><a id="more"></a><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol><li><p>Create new generate token<br><a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">https://github.com/settings/tokens/new</a><br><img src="https://i.loli.net/2019/12/27/pORloh6qCtyPHg9.png" alt="NewGenerateToken.png"></p></li><li><p>Repo Settings create new secret<br><img src="https://i.loli.net/2019/12/27/3yKkW6bVnhjxRPI.png" alt="NewSecrets.png"><br>named GH_TOKEN, paste generate token</p></li><li><p>Repo Actions Create new workflow<br><img src="https://i.loli.net/2019/12/27/JdpoHm1FvnecXba.png" alt="NewWorkflow.png"><br>Set up a workflow yourself, named ci.yml, paste</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Deploy CI</span><br><span class="line">on: [push]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: Hexo Auto-Deploy by GitHub Actions</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: 1. git checkout...</span><br><span class="line">      uses: actions/checkout@v1</span><br><span class="line">      </span><br><span class="line">    - name: 2. setup nodejs...</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">    </span><br><span class="line">    - name: 3. install hexo...</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">        npm install</span><br><span class="line">        </span><br><span class="line">    - name: 4. hexo generate public files...</span><br><span class="line">      run: |</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo g  </span><br><span class="line"></span><br><span class="line">    - name: 5. deploy &apos;public files&apos; to &apos;zhaoyu69.github.io&apos; repo...</span><br><span class="line">      env:</span><br><span class="line">        GH_REF: https://zhaoyu69:$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@github.com/zhaoyu69/zhaoyu69.github.io.git</span><br><span class="line">      run: |</span><br><span class="line">        git config --global user.name &quot;zhaoyu69&quot;</span><br><span class="line">        git config --global user.email &quot;zhaoyu_m69@163.com&quot;</span><br><span class="line">        </span><br><span class="line">        git clone $&#123;GH_REF&#125; hexo-public</span><br><span class="line">        cp -rf public/* hexo-public/        </span><br><span class="line">        cd hexo-public</span><br><span class="line">        git add .</span><br><span class="line">        git commit -am &quot;Hexo Deploy CI built at `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot;</span><br><span class="line">        git push origin master</span><br></pre></td></tr></table></figure></li></ol><p>Start commit.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduce&quot;&gt;&lt;a href=&quot;#Introduce&quot; class=&quot;headerlink&quot; title=&quot;Introduce&quot;&gt;&lt;/a&gt;Introduce&lt;/h2&gt;&lt;p&gt;With GitHub Actions you can automate your workflow from idea to production.&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/12/27/1nV5RxZrSGqHsbm.png&quot; alt=&quot;Workflows.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://zhaoyu69.github.io/categories/Tools/"/>
    
    
      <category term="Github" scheme="http://zhaoyu69.github.io/tags/Github/"/>
    
      <category term="Hexo" scheme="http://zhaoyu69.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
